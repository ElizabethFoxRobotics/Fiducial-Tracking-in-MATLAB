function fiducial_imageProcessing_Stereo()
close all
hObject = figure(1);
GUISize = [35 20];
set( hObject , 'Tag' , 'MainGUIWindow' , ...
    'Toolbar' , 'none' ,...
    'MenuBar' , 'none' ,...
    'Units' , 'normalized' ,...
    'Position' , [.1 0.1 0.9 0.9] ,...
    'PaperType' , '<custom>' ,...
    'PaperOrientation' ,  'portrait' ,...
    'PaperPositionMode' , 'auto' ,...
    'PaperUnits' , 'centimeters' ,...
    'PaperSize' , [GUISize(1) GUISize(2)] ,...
    'Color' , [.9 .9 .9] ,...
    'Resize' , 'off' ,...
    'NumberTitle' , 'off' );

set( hObject , 'Units' , 'centimeters' );
set( hObject , 'Position'  , [1.5 1.5 GUISize(1) GUISize(2)] );

handles = guihandles( hObject );
guidata( hObject , handles );



%% Phase Carpet Analysis Object Creation:

handles.loadImage = uicontrol('Parent', handles.MainGUIWindow,...
    'Tag' , 'loadImage' ,...
    'Style' , 'pushbutton' ,...
    'String' , 'Load Image File' ,...
    'HorizontalAlignment' , 'center' ,...
    'Units' , 'centimeters' ,...
    'BackgroundColor' , [1 1 1] ,...
    'ForegroundColor' , [0 0 0] ,...
    'FontSize' , 12 ,...
    'FontName' , 'Source Sans Pro' ,...
    'Position', [1.75 18 4 1] ,...
    'Callback' , @loadImage_Callback );


handles.interestAreaWindow = uipanel('BackgroundColor',[.9 .9 .9],...
    'Units' , 'centimeters',...
    'BorderType','none',...
    'Position', [2 12.5 4 5],...
    'Visible','off', 'FontSize',12);

uicontrol('Parent', handles.interestAreaWindow,...
    'Style' , 'text' ,...
    'String' , 'Area of Interest' ,...
    'HorizontalAlignment' , 'center' ,...
    'Units' , 'centimeters' ,...
    'BackgroundColor' , [.9 .9 .9] ,...
    'ForegroundColor' , [0 0 0] ,...
    'FontSize' , 12,...
    'FontName' , 'Source Sans Pro' ,...
    'Position', [0 4.4 4 .5]);
handles.imSize = uicontrol('Parent', handles.interestAreaWindow,...
    'Style' , 'text' ,...
    'String' , 'pixels' ,...
    'HorizontalAlignment' , 'center' ,...
    'Units' , 'centimeters' ,...
    'BackgroundColor' , [.9 .9 .9] ,...
    'ForegroundColor' , [0 0 0] ,...
    'FontSize' , 11,...
    'FontName' , 'Source Sans Pro' ,...
    'Position', [0 3.7 4 .5]);

uicontrol('Parent', handles.interestAreaWindow,...
    'Style' , 'text' ,...
    'String' , 'X:' ,...
    'HorizontalAlignment' , 'left' ,...
    'Units' , 'centimeters' ,...
    'BackgroundColor' , [.9 .9 .9] ,...
    'ForegroundColor' , [0 0 0] ,...
    'FontSize' , 12 ,...
    'FontName' , 'Source Sans Pro' ,...
    'Position', [0 2.375 .5 1]);

uicontrol('Parent', handles.interestAreaWindow,...
    'Style' , 'text' ,...
    'String' , 'to  -' ,...
    'HorizontalAlignment' , 'left' ,...
    'Units' , 'centimeters' ,...
    'BackgroundColor' , [.9 .9 .9] ,...
    'ForegroundColor' , [0 0 0] ,...
    'FontSize' , 12 ,...
    'FontName' , 'Source Sans Pro' ,...
    'Position', [1.75 2.375 5 1]);


handles.XMin = uicontrol('Parent', handles.interestAreaWindow,...
    'Tag' , 'XMin' ,...
    'Style' , 'edit' ,...
    'String' , '0' ,...
    'HorizontalAlignment' , 'center' ,...
    'Units' , 'centimeters' ,...
    'BackgroundColor' , [1 1 1] ,...
    'ForegroundColor' , [0 0 0] ,...
    'FontSize' , 12 ,...
    'FontName' , 'Source Sans Pro' ,...
    'Position', [.5 2.75 1.25 .75] ,...
    'Visible','on',...
    'Callback' , @imSize_Callback);
handles.XMax = uicontrol('Parent', handles.interestAreaWindow,...
    'Tag' , 'XMax' ,...
    'Style' , 'edit' ,...
    'String' , '0' ,...
    'HorizontalAlignment' , 'center' ,...
    'Units' , 'centimeters' ,...
    'BackgroundColor' , [1 1 1] ,...
    'ForegroundColor' , [0 0 0] ,...
    'FontSize' , 12 ,...
    'FontName' , 'Source Sans Pro' ,...
    'Position', [2.6 2.75 1.25 .75] ,...
    'Visible','on',...
    'Callback' , @imSize_Callback);

uicontrol('Parent', handles.interestAreaWindow,...
    'Style' , 'text' ,...
    'String' , 'Y:' ,...
    'HorizontalAlignment' , 'left' ,...
    'Units' , 'centimeters' ,...
    'BackgroundColor' , [.9 .9 .9] ,...
    'ForegroundColor' , [0 0 0] ,...
    'FontSize' , 12 ,...
    'FontName' , 'Source Sans Pro' ,...
    'Position', [0 1.625 .5 .5] ,...
    'Visible','on' );

uicontrol('Parent', handles.interestAreaWindow,...
    'Style' , 'text' ,...
    'String' , 'to  -' ,...
    'HorizontalAlignment' , 'left' ,...
    'Units' , 'centimeters' ,...
    'BackgroundColor' , [.9 .9 .9] ,...
    'ForegroundColor' , [0 0 0] ,...
    'FontSize' , 12 ,...
    'FontName' , 'Source Sans Pro' ,...
    'Position', [1.75 1.625 4 .5] ,...
    'Visible','on' );


handles.YMin = uicontrol('Parent', handles.interestAreaWindow,...
    'Tag' , 'YMin' ,...
    'Style' , 'edit' ,...
    'String' , '0' ,...
    'HorizontalAlignment' , 'center' ,...
    'Units' , 'centimeters' ,...
    'BackgroundColor' , [1 1 1] ,...
    'ForegroundColor' , [0 0 0] ,...
    'FontSize' , 12 ,...
    'FontName' , 'Source Sans Pro' ,...
    'Position', [.5 1.5 1.25 .75] ,...
    'Visible','on',...
    'Callback' , @imSize_Callback);
handles.YMax = uicontrol('Parent', handles.interestAreaWindow,...
    'Tag' , 'YMax' ,...
    'Style' , 'edit' ,...
    'String' , '0' ,...
    'HorizontalAlignment' , 'center' ,...
    'Units' , 'centimeters' ,...
    'BackgroundColor' , [1 1 1] ,...
    'ForegroundColor' , [0 0 0] ,...
    'FontSize' , 12 ,...
    'FontName' , 'Source Sans Pro' ,...
    'Position', [2.6 1.5 1.25 .75] ,...
    'Visible','on',...
    'Callback' , @imSize_Callback);
handles.switchImage = uicontrol('Parent', handles.interestAreaWindow,...
    'Tag' , 'switchImage' ,...
    'Style' , 'pushbutton' ,...
    'String' , 'Switch Image' ,...
    'HorizontalAlignment' , 'center' ,...
    'Units' , 'centimeters' ,...
    'BackgroundColor' , [1 1 1] ,...
    'ForegroundColor' , [0 0 0] ,...
    'FontSize' , 12 ,...
    'FontName' , 'Source Sans Pro' ,...
    'Position', [0 0 4 .875] ,...
    'Callback' , @switchImage_Callback );

handles.maskWindow = uipanel('BackgroundColor',[.9 .9 .9],...
    'Units' , 'centimeters',...
    'BorderType','none',...
    'Position', [.5 11.25 7 1],...
    'Visible','off','FontSize',12);

handles.maskImage = uicontrol('Parent', handles.maskWindow,...
    'Tag' , 'maskImage' ,...
    'Style' , 'pushbutton' ,...
    'String' , 'Mask Image' ,...
    'HorizontalAlignment' , 'center' ,...
    'Units' , 'centimeters' ,...
    'BackgroundColor' , [1 1 1] ,...
    'ForegroundColor' , [0 0 0] ,...
    'FontSize' , 12 ,...
    'FontName' , 'Source Sans Pro' ,...
    'Position', [0 0 3.25 .875] ,...
    'Callback' , @maskImage_Callback );

handles.unmaskImage = uicontrol('Parent', handles.maskWindow,...
    'Tag' , 'unmaskImage' ,...
    'Style' , 'pushbutton' ,...
    'String' , 'Unmask Image' ,...
    'HorizontalAlignment' , 'center' ,...
    'Units' , 'centimeters' ,...
    'BackgroundColor' , [1 1 1] ,...
    'ForegroundColor' , [0 0 0] ,...
    'FontSize' , 12 ,...
    'FontName' , 'Source Sans Pro' ,...
    'Position', [3.75 0 3.25 .875] ,...
    'Callback' , @unmaskImage_Callback );

handles.bwWindow = uipanel('BackgroundColor',[.9 .9 .9],...
    'Units' , 'centimeters',...
    'BorderType','none',...
    'Position', [.5 9 7 2],...
    'Visible','off','FontSize',12);

uicontrol('Parent', handles.bwWindow,...
    'Tag' , 'redthr' ,...
    'Style' , 'text' ,...
    'String' , 'Thresholds (0 to 1):' ,...
    'HorizontalAlignment' , 'center' ,...
    'Units' , 'centimeters' ,...
    'BackgroundColor' , [.9 .9 .9] ,...
    'ForegroundColor' , [0 0 0] ,...
    'FontSize' , 12 ,...
    'FontName' , 'Source Sans Pro' ,...
    'Position', [1 1.25 4 .75]);
uicontrol('Parent', handles.bwWindow,...
    'Style' , 'text' ,...
    'String' , 'r:' ,...
    'HorizontalAlignment' , 'left' ,...
    'Units' , 'centimeters' ,...
    'BackgroundColor' , [.9 .9 .9] ,...
    'ForegroundColor' , [0 0 0] ,...
    'FontSize' , 12 ,...
    'FontName' , 'Source Sans Pro' ,...
    'Position', [.25 0 4 .75]);
handles.redthr = uicontrol('Parent', handles.bwWindow,...
    'Tag' , 'redthr' ,...
    'Style' , 'edit' ,...
    'String' , '0' ,...
    'HorizontalAlignment' , 'center' ,...
    'Units' , 'centimeters' ,...
    'BackgroundColor' , [1 1 1] ,...
    'ForegroundColor' , [0 0 0] ,...
    'FontSize' , 12 ,...
    'FontName' , 'Source Sans Pro' ,...
    'Position', [.75 .125 1.25 .75] ,...
    'Callback' , @thr_Callback);

uicontrol('Parent', handles.bwWindow,...
    'Style' , 'text' ,...
    'String' , 'g:' ,...
    'HorizontalAlignment' , 'left' ,...
    'Units' , 'centimeters' ,...
    'BackgroundColor' , [.9 .9 .9] ,...
    'ForegroundColor' , [0 0 0] ,...
    'FontSize' , 12 ,...
    'FontName' , 'Source Sans Pro' ,...
    'Position', [2.25 0 4 .75]);
handles.greenthr = uicontrol('Parent', handles.bwWindow,...
    'Tag' , 'greenthr' ,...
    'Style' , 'edit' ,...
    'String' , '255' ,...
    'HorizontalAlignment' , 'center' ,...
    'Units' , 'centimeters' ,...
    'BackgroundColor' , [1 1 1] ,...
    'ForegroundColor' , [0 0 0] ,...
    'FontSize' , 12 ,...
    'FontName' , 'Source Sans Pro' ,...
    'Position', [2.75 .125 1.25 .75] ,...
    'Callback' , @thr_Callback);

uicontrol('Parent', handles.bwWindow,...
    'Style' , 'text' ,...
    'String' , 'b:' ,...
    'HorizontalAlignment' , 'left' ,...
    'Units' , 'centimeters' ,...
    'BackgroundColor' , [.9 .9 .9] ,...
    'ForegroundColor' , [0 0 0] ,...
    'FontSize' , 12 ,...
    'FontName' , 'Source Sans Pro' ,...
    'Position', [4.25 0 4 .75]);
handles.bluethr = uicontrol('Parent', handles.bwWindow,...
    'Tag' , 'bluethr' ,...
    'Style' , 'edit' ,...
    'String' , '255' ,...
    'HorizontalAlignment' , 'center' ,...
    'Units' , 'centimeters' ,...
    'BackgroundColor' , [1 1 1] ,...
    'ForegroundColor' , [0 0 0] ,...
    'FontSize' , 12 ,...
    'FontName' , 'Source Sans Pro' ,...
    'Position', [4.75 .125 1.25 .75] ,...
    'Callback' , @thr_Callback);

handles.circlesWindow = uipanel('BackgroundColor',[.9 .9 .9],...
    'Units' , 'centimeters',...
    'BorderType','none',...
    'Position', [2 3.375 4 5.5],...
    'Visible','off','FontSize',12);

handles.circlesTxt = uicontrol('Parent', handles.circlesWindow,...
    'Style' , 'text' ,...
    'String' , 'Find Circles' ,...
    'HorizontalAlignment' , 'center' ,...
    'Units' , 'centimeters' ,...
    'BackgroundColor' , [.9 .9 .9] ,...
    'ForegroundColor' , [0 0 0] ,...
    'FontSize' , 12,...
    'FontName' , 'Source Sans Pro' ,...
    'Position', [0 4.75 4 .5]);

uicontrol('Parent', handles.circlesWindow,...
    'Style' , 'text' ,...
    'String' , 'Radii:' ,...
    'HorizontalAlignment' , 'left' ,...
    'Units' , 'centimeters' ,...
    'BackgroundColor' , [.9 .9 .9] ,...
    'ForegroundColor' , [0 0 0] ,...
    'FontSize' , 12 ,...
    'FontName' , 'Source Sans Pro' ,...
    'Position', [0 3.25 1.2 1]);

uicontrol('Parent', handles.circlesWindow,...
    'Style' , 'text' ,...
    'String' , 'to' ,...
    'HorizontalAlignment' , 'left' ,...
    'Units' , 'centimeters' ,...
    'BackgroundColor' , [.9 .9 .9] ,...
    'ForegroundColor' , [0 0 0] ,...
    'FontSize' , 12 ,...
    'FontName' , 'Source Sans Pro' ,...
    'Position', [2.25 3.25 5 1]);


handles.rMin = uicontrol('Parent', handles.circlesWindow,...
    'Style' , 'edit' ,...
    'String' , '6' ,...
    'HorizontalAlignment' , 'center' ,...
    'Units' , 'centimeters' ,...
    'BackgroundColor' , [1 1 1] ,...
    'ForegroundColor' , [0 0 0] ,...
    'FontSize' , 12 ,...
    'FontName' , 'Source Sans Pro' ,...
    'Position', [1.1 3.625 1.125 .75] ,...
    'Visible','on',...
    'Callback' , @findCircles_Callback);
handles.rMax = uicontrol('Parent', handles.circlesWindow,...
    'Style' , 'edit' ,...
    'String' , '100' ,...
    'HorizontalAlignment' , 'center' ,...
    'Units' , 'centimeters' ,...
    'BackgroundColor' , [1 1 1] ,...
    'ForegroundColor' , [0 0 0] ,...
    'FontSize' , 12 ,...
    'FontName' , 'Source Sans Pro' ,...
    'Position', [2.875 3.6255 1.125 .75] ,...
    'Visible','on',...
    'Callback' , @findCircles_Callback);
handles.radTxt = uicontrol('Parent', handles.circlesWindow,...
    'Style' , 'text' ,...
    'String' , '' ,...
    'HorizontalAlignment' , 'center' ,...
    'Units' , 'centimeters' ,...
    'BackgroundColor' , [.9 .9 .9] ,...
    'ForegroundColor' , [0 0 0] ,...
    'FontSize' , 12 ,...
    'FontName' , 'Source Sans Pro' ,...
    'Position', [0 2.625 4 .75] ,...
    'Visible','on');
uicontrol('Parent', handles.circlesWindow,...
    'Style' , 'text' ,...
    'String' , 'Sensitivity:' ,...
    'HorizontalAlignment' , 'left' ,...
    'Units' , 'centimeters' ,...
    'BackgroundColor' , [.9 .9 .9] ,...
    'ForegroundColor' , [0 0 0] ,...
    'FontSize' , 12 ,...
    'FontName' , 'Source Sans Pro' ,...
    'Position', [0.25 1.75 2.1 .5] ,...
    'Visible','on' );


handles.sensitivity = uicontrol('Parent', handles.circlesWindow,...
    'Tag' , 'sensitivity' ,...
    'Style' , 'edit' ,...
    'String' , '.8' ,...
    'HorizontalAlignment' , 'center' ,...
    'Units' , 'centimeters' ,...
    'BackgroundColor' , [1 1 1] ,...
    'ForegroundColor' , [0 0 0] ,...
    'FontSize' , 12 ,...
    'FontName' , 'Source Sans Pro' ,...
    'Position', [2.5 1.675 1.25 .75] ,...
    'Visible','on',...
    'Callback' , @findCircles_Callback);


handles.testSettings = uicontrol('Parent', handles.circlesWindow,...
    'Tag' , 'testSettings' ,...
    'Style' , 'pushbutton' ,...
    'String' , 'Test Settings' ,...
    'HorizontalAlignment' , 'center' ,...
    'Units' , 'centimeters' ,...
    'BackgroundColor' , [1 1 1] ,...
    'ForegroundColor' , [0 0 0] ,...
    'FontSize' , 12 ,...
    'FontName' , 'Source Sans Pro' ,...
    'Position', [0 0 4 .875] ,...
    'Callback' , @testSettings_Callback );


handles.saveData = uicontrol('Parent', handles.MainGUIWindow,...
    'Tag' , 'saveData' ,...
    'Style' , 'pushbutton' ,...
    'String' , 'Save Data' ,...
    'HorizontalAlignment' , 'center' ,...
    'Units' , 'centimeters' ,...
    'BackgroundColor' , [.85 .85 1] ,...
    'ForegroundColor' , [0 0 0] ,...
    'FontSize' , 14 ,...
    'FontName' , 'Source Sans Pro' ,...
    'Position', [2 1.5 4 1] ,...
    'Visible','off',...
    'Callback' , @saveData_Callback );



handles.picture = axes('Parent', handles.MainGUIWindow,...
    'Units' , 'centimeters' ,...
    'Position' , [8.5 1 23 18] ,...
    'FontSize' , 12 ,...
    'FontName' , 'Source Sans Pro' );
handles.bw = 0;
handles.showIm = 1;
handles.goodData = 0;

guidata(hObject, handles);



%% Callbacks

function loadImage_Callback(hObject, ~)
%has user pick image, in format '<mass>g_<pressure>.jpg'; MUST be jpeg
%User should pick image with minimum inputs
handles = guidata( hObject );
handles.goodData = 0;
[FileName,PathName] = uigetfile('*.*','Select First Image File','Multiselect','off');


handles.PathName = PathName;
handles.imNum = 1;

u = strfind(FileName,'_');
handles.numP = length(u); %number of pressure inputs
    
    
handles.image=imread(fullfile(handles.PathName,FileName));
handles.maskDataFull = zeros(size(handles.image));
handles.maskData = handles.maskDataFull;
axes(handles.picture);
imshow(handles.image);

pics = dir(fullfile(handles.PathName,'*.jpg'));
mMax = 0;
FileName2 =FileName; %picture with most stretch for comparison
for i = 1:length(pics) %based on highest mass input
    g = strfind(pics(i).name,'g');
    thisMass = str2double(pics(i).name(1:g(1)-1));
    if thisMass > mMax
        mMax = thisMass;
        FileName2 = pics(i).name;
    end
end

handles.image1 = handles.image;
handles.image2=imread(fullfile(handles.PathName,FileName2));

handles.numFiducials = str2double(cell2mat(inputdlg('           Number of Fiducials:')));

set(handles.interestAreaWindow,'Visible','on')
set(handles.maskWindow,'Visible','on')

set(handles.imSize,'String',[num2str(size(handles.image,2)) ' x ' num2str(size(handles.image,1)) ' pixels'])
guidata(hObject, handles);

function handles = imSize_Callback(hObject, ~)
%Sets area of interest for all images in set according to user inputs
handles = guidata( hObject );
YMax = str2double(get(handles.YMin,'String'));
YMin = str2double(get(handles.YMax,'String'));
XMin = str2double(get(handles.XMin,'String'));
XMax = str2double(get(handles.XMax,'String'));

if handles.imNum == 1
    handles.image = handles.image1(YMin+1:end-YMax,XMin+1:end-XMax,:);
elseif handles.imNum == 2
    handles.image = handles.image2(YMin+1:end-YMax,XMin+1:end-XMax,:);
else
    handles.image = handles.imageT(YMin+1:end-YMax,XMin+1:end-XMax,:);
end

handles.maskData = handles.maskDataFull(YMin+1:end-YMax,XMin+1:end-XMax,:);
handles.image(handles.maskData==1)=255;
handles.rszIm = handles.image;

if handles.showIm
    imshow(handles.image)
end
set(handles.bwWindow,'Visible','on')
guidata(hObject, handles);
if handles.bw
    handles = thr_Callback(hObject);
end

function switchImage_Callback(hObject, ~)
%Toggles between chosen input (least stretch) and max stretch image for
%help in cropping
handles = guidata( hObject );
if handles.imNum == 1
    handles.imNum = 2;
else
    handles.imNum = 1;
end
guidata(hObject, handles);
imSize_Callback(hObject);


function maskImage_Callback(hObject, ~)
handles = guidata( hObject );

h = drawpolygon(handles.picture);

newMask = poly2mask(h.Position(:,1),h.Position(:,2),size(handles.image,1),size(handles.image,2));
delete(h)
oldMask = handles.maskData(:,:,1);
newMask = newMask + oldMask;
newMask(newMask==2)=1;

handles.maskData(:,:,1)=newMask;
handles.maskData(:,:,2)=newMask;
handles.maskData(:,:,3)=newMask;

YMax = str2double(get(handles.YMin,'String'));
YMin = str2double(get(handles.YMax,'String'));
XMin = str2double(get(handles.XMin,'String'));
XMax = str2double(get(handles.XMax,'String'));
handles.maskDataFull(YMin+1:end-YMax,XMin+1:end-XMax,:) = handles.maskData;

handles.image(handles.maskData==1)=255;
imshow(handles.image);
guidata(hObject, handles);
imSize_Callback(hObject);

function unmaskImage_Callback(hObject, ~)
handles = guidata( hObject );

h = drawpolygon(handles.picture);

unMask = poly2mask(h.Position(:,1),h.Position(:,2),size(handles.image,1),size(handles.image,2));
delete(h)

oldMask = handles.maskData(:,:,1);
newMask = oldMask-unMask;
newMask(newMask<0)=0;

handles.maskData(:,:,1)=newMask;
handles.maskData(:,:,2)=newMask;
handles.maskData(:,:,3)=newMask;

YMax = str2double(get(handles.YMin,'String'));
YMin = str2double(get(handles.YMax,'String'));
XMin = str2double(get(handles.XMin,'String'));
XMax = str2double(get(handles.XMax,'String'));
handles.maskDataFull(YMin+1:end-YMax,XMin+1:end-XMax,:) = handles.maskData;

guidata(hObject, handles);
imSize_Callback(hObject);

function handles = thr_Callback(hObject, ~)
%sets threshold for making image black/white; filter biased toward red
%0 gives default; lower numbers remove more black

handles = guidata( hObject );
thrr = uint8(str2double(get(handles.redthr,'String')));
thrg = uint8(str2double(get(handles.greenthr,'String')));
thrb = uint8(str2double(get(handles.bluethr,'String')));
%black = low; white = high(255)
im = handles.rszIm;
imr = im(:,:,1);
img = im(:,:,2);
imb = im(:,:,3);

mask = imr<thrr | img>thrg | imb>thrb;
imr(mask) = 255;
img(mask) = 255;
imb(mask) = 255;
nim(:,:,1)=imr;
nim(:,:,2)=img;
nim(:,:,3)=imb;
im_bw = nim;
%{
    imr1 = im(:,:,2)+im(:,:,3)-im(:,:,1);
    imr2= im(:,:,2)+im(:,:,3);
    thr = str2double(get(handles.redthr,'String'));
    
    him = rgb2hsv(im);
    
    imrd = double(im(:,:,2))+double(im(:,:,3))-double(im(:,:,1))*thr;
    
    %imr = 1-him(:,:,2); %im(:,:,2)+im(:,:,3);%-im(:,:,1);
    im2=double(im(:,:,2))/255;
    im3=double(im(:,:,3))/255;
    nsat = 1-him(:,:,2);
    imr = nsat+im2+im3;
    imr=imr/max(max(imr));
    if thr == 0
        im_bw=imbinarize(imr);
    else
        im_bw=imbinarize(imr,thr);
    end
    
%}
if handles.showIm
    imshow(im_bw)
end
handles.image = im_bw;
set(handles.circlesWindow,'Visible','on')
handles.bw = 1;
guidata(hObject, handles);

handles = findCircles_Callback(hObject);

function handles = findCircles_Callback(hObject, ~)
%finds circles in images according to set radii parameters and sensitivity;
%displays number found

handles = guidata( hObject );
rmin = str2double(get(handles.rMin,'String'));
rmax = str2double(get(handles.rMax,'String'));
sens = str2double(get(handles.sensitivity,'String'));

[c, r, m] = circlesInRange(handles.image,rmin,rmax,sens);
if length(m) > handles.numFiducials
    [m,I] = sort(m,'descend');
    c = c(I,:);
    r = r(I);
    
    xs = c(:,1);
    ys = c(:,2);
    [xs,Ix] = sort(xs);
    close = abs(xs - [xs(2:end); 1000])<rmax;
    Ix = [Ix(close) Ix([false; close(1:end-1)])];
    sort(Ix,2);
    
    [ys,Iy] = sort(ys);
    close = abs(ys - [ys(2:end); -1000])<rmax;
    Iy = [Iy(close) Iy([false; close(1:end-1)])];
    sort(Iy,2);
    
    in = intersect(Ix,Iy,'rows');

    c=c(setdiff(1:length(c),in(:,2)),:);
    r=r(setdiff(1:length(r),in(:,2)));
    m=m(setdiff(1:length(m),in(:,2)));
elseif length(m) < handles.numFiducials
    print('not enough')
end
if length(r) > 0
    set(handles.radTxt,'String',[num2str(round(min(r))) '   ' num2str(round(r(1))) '   ' num2str(round(max(r)))]);
end
if handles.showIm
    cla;
    imshow(handles.image)
    viscircles(c,r); % show circles on image
end
handles.Cs = c;
set(handles.circlesTxt,'String',['Find Circles: (' num2str(length(r)) ')'])
guidata(hObject, handles);

function testSettings_Callback(hObject, ~)
%tests parameters over all images in image directory to make sure each
%finds the right number of fiducials; 
%turns red and displays bad image if found, otherwise allows save
handles = guidata( hObject );
set(hObject,'String','Wait');
set(gcf,'pointer','watch')
drawnow;
isBad = 0;
pics = dir(fullfile(handles.PathName,'*.jpg'));
handles.goodData
if handles.goodData == 0
    handles.data.mass = zeros(1,length(pics));
    handles.data.pres = zeros(handles.numP,length(pics));
    handles.data.locsX = zeros(handles.numFiducials,length(pics));
    handles.data.locsY = zeros(handles.numFiducials,length(pics));
end
handles.showIm = 0;
handles.imNum = 3;
handles.data.version=zeros(1,length(pics));
for i = handles.goodData+1:length(pics)
    handles.imageT = imread(fullfile(handles.PathName,pics(i).name));
    guidata(hObject,handles);
    handles = imSize_Callback(hObject);
    if handles.numFiducials ~= length(handles.Cs)
        isBad = 1;
        handles.showIm = 1;
        guidata(hObject,handles);
        handles = imSize_Callback(hObject);
        set(handles.testSettings,'BackgroundColor','red')
        handles.goodData = 0; %set to restart full
        break;
    end
    
    u = strfind(pics(i).name,'_');
    p = strfind(pics(i).name,'.');
    handles.goodData = i;
    i
    handles.data.mass(i) = str2double(pics(i).name(1:u(1)-2));
    if length(u)>1
        handles.data.pres(1,i)=str2double(regexp(pics(i).name(u(1)+1:u(2)-1),'\_','split'));
        handles.data.pres(2,i)=str2double(regexp(pics(i).name(u(2)+1:u(3)-1),'\_','split'));
        handles.data.pres(3,i)=str2double(regexp(pics(i).name(u(3)+1:u(4)-1),'\_','split'));
        handles.data.version(i)=str2double(regexp(pics(i).name(u(4)+2:p(1)-1),'\_','split'));
    else
        handles.data.pres(:,i)=str2double(regexp(pics(i).name(u(1)+1:p(1)-1),'\_','split'));
    end

    YMax = str2double(get(handles.YMin,'String'));
    YMin = str2double(get(handles.YMax,'String'));
    XMin = str2double(get(handles.XMin,'String'));
    XMax = str2double(get(handles.XMax,'String'));

    handles.image = handles.image1(YMin+1:end-YMax,XMin+1:end-XMax,:);
    
    
    tracker_data = zeros(length(handles.Cs),3); % !!!!!!
    tracker_data(:,1:2) = handles.Cs; % tracker center coordinates
    tracker_data(:,3) = -1*tracker_data(:,1)+tracker_data(:,2); % tracker radii
    
    tracker_data = sortrows(tracker_data,3,'descend'); % sort by x/y-pos
    
    handles.data.locsX(:,i) = tracker_data(:,1)+str2double(get(handles.XMin,'String'));
    handles.data.locsY(:,i) = tracker_data(:,2)+str2double(get(handles.YMin,'String'));
end
handles.showIm = 1;
set(gcf,'pointer','arrow')
set(handles.testSettings,'String','Test Settings');
if isBad == 0
    set(handles.saveData,'Visible','on')
    set(handles.testSettings,'BackgroundColor','white')
end
guidata(hObject, handles);

function saveData_Callback(hObject, ~)
%saves data in image folder
handles = guidata( hObject );


isnotgoodname = 1;
count2 = 1;
while isnotgoodname
    OutFileName = ['Fiducials_Analyzed_' num2str(count2) '.mat'];
    OutFullFile = fullfile(handles.PathName,OutFileName);
    
    A = exist(OutFullFile,'file');
    if A == 2
        count2 = count2+1;
        OutFileName = ['Fiducials_Analyzed_' num2str(count2) '.mat'];
        OutFullFile = fullfile(handles.PathName,OutFileName);
    else
        isnotgoodname = 0;
    end
end

DataOutput = handles.data;
save(OutFullFile,'DataOutput')

set(handles.saveData ,'String','Saved')
guidata(hObject, handles);


%% Subfunctions
function [c, r, m] = circlesInRange(image,rmin,rmax,sens)
if rmax < 3* rmin
    [c, r, m] = imfindcircles(image,[rmin rmax],'ObjectPolarity','dark','Sensitivity',sens);
else
    rmed = round((rmax - rmin)/2) + rmin; %avg
    [c1, r1, m1] = circlesInRange(image,rmin,rmed+1,sens);
    [c2, r2, m2] = circlesInRange(image,rmed-1,rmax,sens);
    c = [c1; c2];
    r = [r1; r2];
    m = [m1; m2];
end    